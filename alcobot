#!/usr/bin/env perl

use utf8;
use strict;
use warnings;
use v5.13.9;
use DBIx::Custom;
use FindBin qw($Bin);
use HTTP::Tiny;

my $DB;

exit main() unless caller;

sub main {
	my ($ok, $why) = HTTP::Tiny->can_ssl;
	die $why unless $ok;

	my $config = do("$Bin/config.pl");

	die "I need a token to start" unless $config->{token};
	die "I need a brain to start" unless $config->{db};

	$DB = DBIx::Custom->connect(
		"dbi:SQLite:database=$Bin/$config->{db}",
		undef,
		undef,
		{sqlite_unicode => 1},
	);

	$config->{timer} //= 2;

	App->new(
		token   => $config->{token},
		timer   => $config->{timer},
		chat_id => $config->{chat},
	)->run;
}

#========================================================================================

package App {
	use strict;
	use warnings;
	use Data::Dumper;

	BEGIN {
		for my $method ( qw/token timer _chat_id _last_msg_at/ ) {
			no strict 'refs';
			*$method = sub {
				my $self = shift;
				if (@_) { $self->{ $method } = shift }
				return $self->{ $method };
			};
		}
	}

	sub new {
		my ($class, %args) = @_;
		my $self = {};
		bless $self, $class;
		$self->token($args{token});
		$self->timer($args{timer});
		$self->_chat_id($args{chat_id});
		$self->_last_msg_at(time);
		return $self;
	}

	sub run {
		my $self     = shift;
		my $telegram = Telegram->new(
			token => $self->token,
		);

		while (42) {
			if (my $msg = $telegram->next) {
				say Dumper $msg->{message};
				if ($self->_chat_id and $msg->{message}{chat}{id}) {
					next unless $msg->{message}{chat}{id} eq $self->_chat_id;
				}

				if ((time - $self->_last_msg_at) > 3600) {
					$self->_last_msg_at(time);
					my $word   = Brain::random_word();
					my $answer = Brain::answer($word);

					if ($answer) {
						$telegram->send(
							chat_id => $self->_chat_id,
							text    => $answer,
							token   => $self->token,
						);
					}
				}

				if ($msg->{message}{text}) {
					my @words = split(/\s+/, $msg->{message}{text});
					Brain::memorize(@words) if (scalar @words) > 1;

					if (int(rand(10)) == 3) {
						my $word   = $words[int(rand((scalar @words)-1))];
						my $answer = Brain::answer($word);

						if ($answer) {
							$telegram->send(
								chat_id => $msg->{message}{chat}{id},
								text    => $answer,
								token   => $self->token,
							);
						}
					}
				}
			}
			sleep $self->timer;
		}
	}
}

#========================================================================================

package Brain {
	use strict;
	use warnings;

	sub memorize {
		if (@_ > 1) {
			my $first_word = shift;
			for my $word (@_) {
				if ($first_word !~ m/[.,-]/) {
					$DB->execute(
						'INSERT INTO pairs (first, second) VALUES (:f, :s)
						ON CONFLICT(first, second)
						DO UPDATE SET cnt = cnt + 1',
						{
							f => lc $first_word =~ s/[,.?!;"']//gr,
							s => lc $word       =~ s/[,.?!;"']//gr,
						},
					);
				}

				$first_word = $word;
			}
		}
	}

	sub answer {
		my $key_word    = shift;
		my $tmp_word    = $key_word;
		my $phrase_size = int(rand(10)) + 5;
		my $phrase      = $tmp_word;

		while ($phrase_size) {
			my $words = $DB->execute(
				'SELECT second FROM pairs WHERE first = :f ORDER BY cnt DESC LIMIT 4',
				{f => $tmp_word},
			)->all;

			my $cnt = scalar @$words;

			my $word = $words->[int(rand($cnt))]->{second};

			$phrase .= " $word" if $word;
			$tmp_word = $word;
			$phrase_size--;
		}

		return $phrase eq $key_word ? undef : $phrase;
	}

	sub random_word {
		my $word = $DB->execute(
			q{SELECT first FROM pairs ORDER BY RANDOM() LIMIT 1}
		)->one;
		return $word->{first};
	}
}

#========================================================================================

package Telegram {
	use strict;
	use warnings;

	BEGIN {
		for my $method ( qw/_token _update_id/ ) {
			no strict 'refs';
			*$method = sub {
				my $self = shift;
				if (@_) { $self->{ $method } = shift }
				return $self->{ $method };
			};
		}
	}

	sub new {
		my ($class, %args) = @_;
		my $self = {
			update_id => undef,
		};
		bless $self, $class;
		$self->_token($args{token});
		return $self;
	}

	sub next {
		my $self = shift;
		my $upd = Telegram::Api->get_updates(
			token     => $self->_token,
			update_id => $self->_update_id,
		);

		if ($upd) {
			$self->_update_id($upd->{update_id} + 1);
			return $upd;
		}

		return undef;
	}

	sub send {
		my ($self, %args) = @_;
		my $api = Telegram::Api->send_message(
			token   => $self->_token,
			chat_id => $args{chat_id},
			text    => $args{text},
		);
	}
}

#========================================================================================

package Telegram::Api {
	use strict;
	use warnings;
	use HTTP::Tiny;
	use JSON::PP qw(decode_json encode_json);

	sub send_message {
		my ($self, %args) = @_;
		_post(%args);
	}

	sub get_updates {
		my ($self, %args) = @_;
		return _get(
			path	  => '/getUpdates',
			token   => $args{token},
			queries => {
				allowed_updates => 'update_id,message',
				limit           => 1,
				offset          => $args{update_id},
			},
		);
	}

	sub _post {
		my (%args) = @_;
		my $url = sprintf 'https://api.telegram.org/bot%s/sendMessage', $args{token};

		my $content = encode_json( {
				text    => $args{text},
				chat_id => $args{chat_id},
			});

		my $headers = {
			'Content-Type' => 'application/json; charset=utf-8',
		};

		my $response = HTTP::Tiny->new->post($url, {
				content => $content,
				headers => $headers});
	}

	sub _get {
		my (%args) = @_;

		my @queries;
		while (my ($key, $value) = each %{$args{queries}}) {
			push @queries, sprintf('%s=%s', $key, $value) if $value;
		}

		my $response = HTTP::Tiny->new->get(sprintf('https://api.telegram.org/bot%s%s?%s',
			$args{token},
			$args{path},
			join '&', @queries,
		));

		say STDERR "[ERR] $response->{status} $response->{reason}"
			unless $response->{status} == 200;

		my $result;
		eval { $result = decode_json $response->{content} };
		if ($@) {return undef;}

		return $result->{result}[0];
	}
}
